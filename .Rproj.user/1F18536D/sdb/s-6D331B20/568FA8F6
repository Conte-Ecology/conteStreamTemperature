{
    "contents" : "rm(list=ls())\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(nlme)\n\n#setwd('/Users/Dan/Documents/Research/Stream_Climate_Change/temperatureProject/')\n#setwd('C:/Users/dhocking/Documents/temperatureProject/')\n\n#baseDir <- 'C:/KPONEIL/GitHub/projects/temperatureProject/'\n#baseDir <- '/Users/Dan/Documents/Research/Stream_Climate_Change/temperatureProject/'\nbaseDir <- 'C:/Users/dhocking/Documents/temperatureProject/'\nsetwd(baseDir)\n\ndataInDir <- paste0(baseDir, 'dataIn/')\ndataOutDir <- paste0(baseDir, 'dataOut/')\ndataLocalDir <- paste0(baseDir, 'localData/')\ngraphsDir <- paste0(baseDir, 'graphs/')\n\nsource(paste0(baseDir, 'code/functions/temperatureModelingFunctions.R'))\n\nloadLocalData <- F\n\nif(loadLocalData) {\n  load(paste0(dataLocalDir, 'etSCT'))\n} else {\n  load(paste0(dataOutDir, 'tempDataSync.RData'))\n}\n\n\n########## JAGS Model ##############\nsink(\"code/correlatedSlopes.txt\")\ncat(\"\n    model{\n    # Likelihood\n    for(i in 1:n){ # n observations\n    temp[i] ~ dnorm(stream.mu[i], tau)\n    stream.mu[i] <- inprod(B.0[], X.0[i, ]) + inprod(B.site[site[i], ], X.site[i, ]) + inprod(B.year[year[i], ], X.year[i, ]) #  \n    }\n    \n    # prior for model variance\n    sigma ~ dunif(0, 100)\n    tau <- pow(sigma, -2)\n    \n    for(k in 1:K.0){\n    B.0[k] ~ dnorm(0, 0.001) # priors coefs for fixed effect predictors\n    }\n    \n    # Priors for random effects of site\n    for(j in 1:J){ # J sites\n    B.site[j, 1:K] ~ dmnorm(mu.site[ ], tau.B.site[ , ])\n    }\n    mu.site[1] <- 0\n    for(k in 2:K){\n    mu.site[k] ~ dnorm(0, 0.0001)\n    }\n    \n    # Prior on multivariate normal std deviation\n    tau.B.site[1:K, 1:K] ~ dwish(W.site[ , ], df.site)\n    df.site <- K + 1\n    sigma.B.site[1:K, 1:K] <- inverse(tau.B.site[ , ])\n    for(k in 1:K){\n    for(k.prime in 1:K){\n    rho.B.site[k, k.prime] <- sigma.B.site[k, k.prime]/sqrt(sigma.B.site[k, k]*sigma.B.site[k.prime, k.prime])\n    }\n    sigma.b.site[k] <- sqrt(sigma.B.site[k, k])\n    }\n    \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for(t in 1:Ti){ # Ti years\n    B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n    }\n    mu.year[1] <- 0\n    for(l in 2:L){\n    mu.year[l] ~ dnorm(0, 0.0001)\n    }\n    \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year <- L + 1\n    sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    for(l in 1:L){\n    for(l.prime in 1:L){\n    rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n    }\n    sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    }\n\n    }\n    \", fill = TRUE)\nsink()\n\n# Fixed effects\n#variables.fixed <- c(\"intercept\",  \n                     #\"drainage\", \n                     #\"forest\",\n                     #\"elevation\")\n#K.0 <- length(variables.fixed)\nX.0 <- data.frame(intercept = 1,\n                  lat = tempDataSyncS$Latitude,\n                  lon = tempDataSyncS$Longitude)\nvariables.fixed <- names(X.0)\nK.0 <- length(variables.fixed)\n\n\n# Random site effects\n#variables.site <- c(\"Intercept-site\",\n #                   \"Air Temperature\",\n  #                  \"Air Temp Lag1\",\n   #                 \"Air Temp Lag2\",\n    #                \"Precip\",\n     #               \"Precip Lag1\",\n      #              \"Precip Lag2\")\n\n# Slope, Aspect, Dams/Impoundments, Agriculture, Wetland, Coarseness, dayl, srad, swe\n\nX.site <- data.frame(intercept.site = 1, \n                     airTemp = tempDataSyncS$airTemp, \n                     airTempLag1 = tempDataSyncS$airTempLagged1,\n                     airTempLag2 = tempDataSyncS$airTempLagged2,\n                     precip = tempDataSyncS$prcp,\n                     precipLag1 = tempDataSyncS$prcpLagged1,\n                     precipLag2 = tempDataSyncS$prcpLagged3,\n                     drainage = tempDataSyncS$TotDASqKM,\n                     forest = tempDataSyncS$Forest,\n                     elevation = tempDataSyncS$ReachElevationM,\n                     coarseness = tempDataSyncS$SurficialCoarseC,\n                     wetland = tempDataSyncS$CONUSWetland,\n                     impoundments = tempDataSyncS$ImpoundmentsAllSqKM,\n                     swe = tempDataSyncS$swe)\nvariables.site <- names(X.site)\nJ <- length(unique(tempDataSyncS$site))\nK <- length(variables.site)\nn <- dim(tempDataSyncS)[1]\nW.site <- diag(K)\n\n# Random Year effects\n#variables.year <- c(\"Intercept-year\",\n  #                  \"dOY\",\n   #                 \"dOY2\",\n    #                \"dOY3\")\n\nX.year <- data.frame(intercept.year = 1, \n                     dOY = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3)\nvariables.year <- names(X.year)\nTi <- length(unique(tempDataSyncS$year))\nL <- length(variables.year)\nW.year <- diag(L)\n\ndata <- list(n = n, \n             J = J, \n             K = K, \n             Ti = Ti,\n             L = L,\n             K.0 = K.0,\n             X.0 = X.0,\n             W.site = W.site,\n             W.year = W.year,\n             temp = tempDataSyncS$temp,\n             X.site = X.site, #as.matrix(X.site),\n             X.year = as.matrix(X.year),\n             site = as.factor(tempDataSyncS$site),\n             year = as.factor(tempDataSyncS$year))\n\ninits <- function(){\n  list(#B.raw = array(rnorm(J*K), c(J,K)), \n    #mu.site.raw = rnorm(K),\n    sigma = runif(1),\n    #tau.B.site.raw = rwish(K + 1, diag(K)),\n    xi = runif(K))\n}\n\nparams <- c(\"sigma\",\n            \"B.0\",\n            \"B.site\",\n            \"rho.B.site\",\n            \"mu.site\",\n            \"sigma.b.site\",\n            \"B.year\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\")\n\n#M1 <- bugs(tempDataSyncS, )\n\nn.burn = 5000\nn.it = 3000\nn.thin = 3\n\nlibrary(parallel)\nlibrary(rjags)\n\nCL <- makeCluster(3)\nclusterExport(cl=CL, list(\"data\", \"inits\", \"params\", \"K\", \"J\", \"Ti\", \"L\", \"n\", \"W.site\", \"W.year\", \"X.site\", \"X.year\", \"n.burn\", \"n.it\", \"n.thin\"), envir = environment())\nclusterSetRNGStream(cl=CL, iseed = 2345642)\n\nsystem.time(out <- clusterEvalQ(CL, {\n  library(rjags)\n  load.module('glm')\n  jm <- jags.model(\"code/correlatedSlopes.txt\", data, inits, n.adapt=n.burn, n.chains=1)\n  fm <- coda.samples(jm, params, n.iter = n.it, thin = n.thin)\n  return(as.mcmc(fm))\n}))\n\nM3 <- mcmc.list(out)\nstopCluster(CL)\n\n#pdf(\"/Users/Dan/Dropbox/correlatedSlopes.pdf\")\npdf(\"C:/Users/dhocking/Dropbox/correlatedSlopes.pdf\")\nplot(M3[ , 1:50])\ndev.off()\n\nrm(out)\n\npairs(as.matrix(M3[ , c(1:8, 17:20)]))\n\nmemory.limit(size = 1e6)\n\nsummary.stats <- summary(M3)\nsummary.stats[1:1000, 1:2]\n\n# Make \"Fixed Effects\" Output like summary(lmer)\nfix.ef <- as.data.frame(matrix(NA, K.0+K+L, 4))\nnames(fix.ef) <- c(\"Mean\", \"Std. Error\", \"LCI\", \"UCI\")\nrow.names(fix.ef) <- c(variables.fixed, variables.site, variables.year)\nfor(k in 1:K.0){\n  fix.ef[k, 1:2] <- summary.stats$statistics[paste0('B.0[',k,']') , c(\"Mean\", \"SD\")]\n  fix.ef[k, 3:4] <- summary.stats$quantiles[paste0('B.0[',k,']') , c(\"2.5%\", \"97.5%\")]\n}\nfor(k in 1:K){\n  fix.ef[k+K.0, 1:2] <- summary.stats$statistics[paste0('mu.site[',k,']') , c(\"Mean\", \"SD\")]\n  fix.ef[k+K.0, 3:4] <- summary.stats$quantiles[paste0('mu.site[',k,']') , c(\"2.5%\", \"97.5%\")]\n}\nfor(l in 1:L){\n  fix.ef[l+K.0+K, 1:2] <- summary.stats$statistics[paste0('mu.year[',l,']') , c(\"Mean\", \"SD\")]\n  fix.ef[l+K.0+K, 3:4] <- summary.stats$quantiles[paste0('mu.year[',l,']') , c(\"2.5%\", \"97.5%\")]\n}\nfix.ef\n\n# Make Random Effects Output like summary(lmer)\nran.ef.site <- as.data.frame(matrix(NA, K, 2))\nnames(ran.ef.site) <- c(\"Variance\", \"SD\")\nrow.names(ran.ef.site) <- variables.site\nfor(k in 1:K){\n  ran.ef.site[k, 2] <- summary.stats$statistics[paste0('sigma.b.site[',k,']') , c(\"Mean\")]\n  ran.ef.site[k, 1] <- ran.ef.site[k, 2] ^ 2\n}\nran.ef.site\n\nS <- length(unique(tempDataSyncS$site))\nB.site <- as.data.frame(matrix(NA, S, K))\nnames(B.site) <- variables.site\nrow.names(B.site) <- unique(tempDataSyncS$site)\nfor(s in 1:S){\n  for(k in 1:K){\n    B.site[s, k] <- summary.stats$statistics[paste('B.site[',s,',',k,']', sep=\"\"), \"Mean\"]\n  }\n}\n\n# Make Random Effects Output like summary(lmer)\nran.ef.year <- as.data.frame(matrix(NA, L, 2))\nnames(ran.ef.year) <- c(\"Variance\", \"SD\")\nrow.names(ran.ef.year) <- variables.year\nfor(l in 1:L){\n  ran.ef.year[l, 2] <- summary.stats$statistics[paste0('sigma.b.year[',l,']') , c(\"Mean\")]\n  ran.ef.year[l, 1] <- ran.ef.year[l, 2] ^ 2\n}\nran.ef.year\n\nY <- length(unique(tempDataSyncS$year))\nB.year <- as.data.frame(matrix(NA, Y, L))\nnames(B.year) <- variables.year\nrow.names(B.year) <- unique(tempDataSyncS$year)\nfor(y in 1:Y){\n  for(l in 1:L){\n    B.year[y, l] <- summary.stats$statistics[paste('B.year[',y,',',l,']', sep=\"\"), \"Mean\"]\n  }\n}\n\n# Make correlation matrix of random site effects\ncor.site <- as.data.frame(matrix(NA, K, K))\nnames(cor.site) <- variables.site\nrow.names(cor.site) <- variables.site\nfor(k in 1:K){\n  for(k.prime in 1:K){\n    cor.site[k, k.prime] <- summary.stats$statistics[paste('rho.B.site[',k,',',k.prime,']', sep=\"\"), \"Mean\"]\n  }\n}\ncor.site <- round(cor.site, digits=3)\ncor.site[upper.tri(cor.site, diag=TRUE)] <- ''\ncor.site\n\n# Make correlation matrix of random year effects\ncor.year <- as.data.frame(matrix(NA, L, L))\nnames(cor.year) <- variables.year\nrow.names(cor.year) <- variables.year\nfor(l in 1:L){\n  for(l.prime in 1:L){\n    cor.year[l, l.prime] <- summary.stats$statistics[paste('rho.B.year[',l,',',l.prime,']', sep=\"\"), \"Mean\"]\n  }\n}\ncor.year <- round(cor.year, digits=3)\ncor.year[upper.tri(cor.year, diag=TRUE)] <- ''\ncor.year\n\n# combine model summary results into an S4 Object\nsetClass(\"jagsSummary\",\n         representation(fixEf=\"data.frame\",\n                        ranEf=\"list\",\n                        ranCor=\"list\",\n                        BSite=\"data.frame\",\n                        BYear=\"data.frame\"))\n\nmodSummary <- new(\"jagsSummary\")\nmodSummary@fixEf <- fix.ef\nmodSummary@ranEf <- list(ranSite=ran.ef.site, ranYear=ran.ef.year)\nmodSummary@ranCor <- list(corSite=cor.site, corYear=cor.year)\nmodSummary@BSite <- B.site\nmodSummary@BYear <- B.year\n\nmodSummary\nstr(modSummary)\n\nsave(modSummary, file=paste0(dataOutDir, 'modSummary.RData'))\n\n# Add predicted stream temperatures to dataframe\ntempDataSync$streamTempPred <- NA\ntempDataSync$streamTempPredLCI <- NA\ntempDataSync$streamTempPredUCI <- NA\nfor(i in 1:n){\n  tempDataSync$streamTempPred[i] <- summary.stats$statistics[paste0('stream.mu[',i,']') , c(\"Mean\")]\n  tempDataSync$streamTempPredLCI[i] <- summary.stats$quantiles[paste0('stream.mu[',i,']') , c(\"2.5%\")]\n  tempDataSync$streamTempPredUCI[i] <- summary.stats$quantiles[paste0('stream.mu[',i,']') , c(\"97.5%\")]\n}\n\n\n\n########## Check model fit #############\ntempDataSync$err <- tempDataSync$streamTempPred - tempDataSync$temp\nrmse(tempDataSync$err)\n\n# Add fit for validation data\n\n########################################\n\n############ Plots ###############\nggplot(tempDataSync, aes(temp, streamTempPred)) + geom_point() +geom_abline(slope=1, intercept=0, colour='red')\n\nggplot(tempDataSync, aes(airTemp, streamTempPred)) + geom_point(aes(colour = dOY, size=0.5, alpha=0.5)) + facet_grid(. ~ year)\n\nggplot(tempDataSync, aes(dOY, streamTempPred)) + geom_point(size=0.75) + geom_point(data=tempDataSync, aes(dOY, temp), colour = \"red\", size=0.75) + facet_grid(. ~ year)\n\nggplot(tempDataSync, aes(dOY, streamTempPred, colour = year)) + geom_line(size=0.5)\n\n\nggplot(tempDataSync, aes(dOY, streamTempPred, colour = year)) + geom_point(aes(group = year))\n\nggplot(tempDataSync, aes(airTemp, streamTempPred)) + geom_line(size = 0.5, alpha = 0.3) + theme_bw() + theme(legend.position=\"none\")\nggplot(tempDataSync, aes(airTemp, streamTempPred, colour = site)) + geom_point(size = 0.5, alpha = 0.8) + theme_bw() + theme(legend.position=\"none\")\n\nggplot(tempDataSync, aes(airTemp, streamTempPred, group = site)) + \n  geom_line(stat='smooth', method='lm', se=F, alpha=0.2, size=0.5, colour='black') + \n  theme_bw() +\n  theme(legend.position=\"none\") + \n  xlab('Air Temperature (C)') + \n  ylab('Predicted Stream Temperature (C)')\n\n# plot observed and predicte vs day of the year for all sites\nsites <- unique(tempDataSync$site)\n\nfor(i in 1:length(unique(tempDataSync$site))){\n  dataSite <- filter(tempDataSync, filter = site == sites[i])\n  foo <- ggplot(dataSite, aes(dOY, temp)) + coord_cartesian(xlim = c(50, 350), ylim = c(0, 30)) + geom_point(colour = 'blue') + geom_line(colour = 'blue') + geom_point(aes(dOY, streamTempPred), colour = 'red', size=1) + geom_line(aes(dOY, streamTempPred), colour = 'red', size=0.1) + geom_point(aes(dOY, airTemp), colour='black', size=1) + ggtitle(unique(tempDataSync$fsite)[i]) + facet_wrap(~year) + xlab(label = 'Day of the year') + ylab('Temperature (C)')\n  ggsave(filename=paste0(dataLocalDir,'/', 'plots/', unique(tempDataSync$fsite)[i], '.png'), plot=foo, dpi=300 , width=6,height=4, units='in' )\n} # surprisingly fast\n\n\n\n###### Consider: Slope, Aspect, Dams/Impoundments, Agriculture, Wetland, Coarseness, dayl, srad, swe\n\n####### Add correlation structure for Lat-Lon and/or HUC ########\n\n##### Add autoregressive component to the model? #########\n\n##### Add interactions such as airTemp*drainage\n\n\n\n\n\n",
    "created" : 1406839116660.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4095434781",
    "id" : "568FA8F6",
    "lastKnownWriteTime" : 1405483834,
    "path" : "~/temperatureProject/code/jagsTempAll.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}