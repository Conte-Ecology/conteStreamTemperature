{
    "contents" : "rm(list=ls())\n\n#library(devtools)\n# devtools::install_github(\"hadley/dplyr\") # not working\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(DataCombine) # for the slide function\n\n#setwd('/Users/Dan/Documents/Research/Stream_Climate_Change/temperatureProject/')\n#setwd('C:/Users/dhocking/Documents/temperatureProject/')\n\n#baseDir <- 'C:/KPONEIL/GitHub/projects/temperatureProject/'\n#baseDir <- '/Users/Dan/Documents/Research/Stream_Climate_Change/temperatureProject/'\nbaseDir <- 'C:/Users/dhocking/Documents/temperatureProject/'\nsetwd(baseDir)\n\ndataInDir <- paste0(baseDir, 'dataIn/')\ndataOutDir <- paste0(baseDir, 'dataOut/')\ndataLocalDir <- paste0(baseDir, 'localData/')\ngraphsDir <- paste0(baseDir, 'graphs/')\n\nsource(paste0(baseDir, 'code/functions/temperatureModelingFunctions.R'))\nsource(paste0(baseDir, 'code/functions/dataIndexingFunctions.R'))\n\nload((paste0(dataOutDir, 'modSummary.RData')))\nload(paste0(dataLocalDir, 'daymetFullRecordObservedMASites.RData'))\nload(paste0(dataOutDir, 'tempDataSync.RData'))\n\nload(paste0(dataOutDir, 'springFallBreakpoints.RData'))\n\n#Northeast\nCTDEP  <- T\nMAFW   <- T\nMAUSGS <- T\nMADEP  <- T \nNHFG   <- F\nNHDES  <- F\nUSFS   <- F\nVTFWS  <- F\nMEDMR  <- F\n\n#Montana\nMTUSGSYellowstone <- F\nMTUSGSGlacier <- F\n\nsourceChoice <- list( CTDEP,   MAFW,   MAUSGS, MADEP,   NHFG,   NHDES,   MEDMR,   USFS,   VTFWS,    MTUSGSYellowstone,   MTUSGSGlacier)\nsourceNames  <- c   ('CTDEP', 'MAFW', 'MAUSGS', 'MADEP', 'NHFG', 'NHDES', 'MEDMR', 'USFS', 'VTFWS',  'MTUSGSYellowstone', 'MTUSGSGlacier')\n\ndataSource <- sourceNames[sourceChoice == T]\n\nfields <- c(\"agency\", \"date\", \"AgencyID\", \"year\", \"site\", \"date\", \"dOY\", \"temp\", \"airTemp\", \"prcp\", \"srad\", \"dayl\", \"swe\")\n\ncovariateData <- readStreamTempData(timeSeries=FALSE, covariates=TRUE, dataSourceList=dataSource, fieldListTS=fields, fieldListCD='ALL', directory=dataInDir)\nspringFallBPs$site <- as.character(springFallBPs$site)\n\n\n########## How to add BP for years without data and clip data to the sync period ??? #######\n# Join with break points\ncovariateDataBP <- left_join(covariateData, springFallBPs, by=c('site', 'year'))\n# rm(covariateData)\n\n# temp hack\nclimateData$site <- as.character(climateData$site)\ntempFullSync <- left_join(climateData, covariateData, by=c('site'))\n\n# Clip to syncronized season\n# tempFullSync <- filter(tempDataBP, dOY >= finalSpringBP & dOY <= finalFallBP)\n\n# temp hack\ntempFullSync <- filter(tempFullSync, dOY >= 50 & dOY <= 350)\ntempFullSync$Latitude <- tempFullSync$Latitude.x\ntempFullSync$Longitude <- tempFullSync$Longitude.x\n##################\n\n# Order by group and date\ntempFullSync <- tempFullSync[order(tempFullSync$site,tempFullSync$year,tempFullSync$dOY),]\n\n# For checking the order of tempFullSync\ntempFullSync$count <- 1:length(tempFullSync$year)\n\ntempFullSync <- tempFullSync[order(tempFullSync$count),] # just to make sure tempFullSync is ordered for the slide function\n\n# airTemp\ntempFullSync <- slide(tempFullSync, Var = \"airTemp\", GroupVar = \"site\", slideBy = -1, NewVar='airTempLagged1')\ntempFullSync <- slide(tempFullSync, Var = \"airTemp\", GroupVar = \"site\", slideBy = -2, NewVar='airTempLagged2')\n\n# prcp\ntempFullSync <- slide(tempFullSync, Var = \"prcp\", GroupVar = \"site\", slideBy = -1, NewVar='prcpLagged1')\ntempFullSync <- slide(tempFullSync, Var = \"prcp\", GroupVar = \"site\", slideBy = -2, NewVar='prcpLagged2')\ntempFullSync <- slide(tempFullSync, Var = \"prcp\", GroupVar = \"site\", slideBy = -3, NewVar='prcpLagged3')\n\ntempFullSync <- left_join(tempFullSync, tempDataSync[ , c(\"site\", \"date\", \"temp\")], by = c(\"site\", \"date\"))\n\n# Make dataframe with just variables for modeling and order before standardizing\ntempFullSync <- tempFullSync[ , c(\"year\", \"site\", \"date\",  \"FEATUREID\", \"HUC4\", \"HUC8\", \"HUC12\", \"temp\", \"Latitude\", \"Longitude\", \"airTemp\", \"airTempLagged1\", \"airTempLagged2\", \"prcp\", \"prcpLagged1\", \"prcpLagged2\", \"prcpLagged3\", \"dOY\", \"Forest\", \"Herbacious\", \"Agriculture\", \"Developed\", \"TotDASqKM\", \"ReachElevationM\", \"ImpoundmentsAllSqKM\", \"HydrologicGroupAB\", \"SurficialCoarseC\", \"CONUSWetland\", \"ReachSlopePCNT\", \"srad\", \"dayl\", \"swe\")] #  \"finalSpringBP\", \"finalFallBP\", \"agency\", \"\"date\",\"fsite\", \"fyear\", \"AgencyID\" \n\nsummary(tempFullSync)\ndim(tempFullSync)\n#tempFullSync <- na.omit(tempFullSync) ####### Change this so don't take out NA in stream temperature\ndim(tempFullSync)\n\n# Standardize for Analysis\n\nstdCovs <- function(x, y, varNames){\n  xStd <- as.data.frame(matrix(NA, dim(x)[1], length(varNames)))\n  names(xStd) <- varNames\n  for(i in 1:length(varNames)){\n    xStd[ , varNames[i]] <- (x[ , varNames[i]] - mean(y[ , varNames[i]], na.rm=T)) / sd(y[ , varNames[i]], na.rm=T)\n  }\n  return(xStd)\n}\n\nvarNames1 <- names(tempFullSync[ ,9:dim(tempFullSync)[2]])\n\ntempFullStd <- stdCovs(tempFullSync, tempDataSync, varNames1)\ntempFullSyncS <- cbind(tempFullSync[ ,c(1:8)], tempFullStd)\n\nsummary(tempFullSyncS)\ntempFullSyncS[is.na(tempFullSyncS)] <- 0\n\nfixEf <- modSummary@fixEf[ ,\"Mean\"]\nnames(fixEf) <- row.names(modSummary@fixEf)\n\n#tempFullSync <- tempFullSync[which(tempFullSync$site %in% unique(tempDataSync$site)), ]\n#tempFullSyncS <- tempFullSync[which(tempFullSyncS$site %in% unique(tempDataSync$site)), ]\nsites <- unique(tempFullSync$site)\nBSite <- modSummary@BSite\nBYear <- modSummary@BYear\n\ntempFullSyncS$cYear <- as.character(tempFullSyncS$year)\n\n\n# Split data by site-year then do predictions for those with observed stream temperature data and those without, then recombine. The problem is that sites outside of the years observed won't get the site-specific values and years with data but at different sites won't get the site-specific data.\ntempFullSyncS$siteYear <- paste0(tempFullSyncS$site, tempFullSyncS$year)\ntempDataSyncS$siteYear <- paste0(tempDataSyncS$site, tempDataSyncS$year)\n\ntempFullSiteYearS <- tempFullSyncS[which(tempFullSyncS$siteYear %in% unique(tempDataSyncS$siteYear)), ]\ntempFullMeanS <- subset(tempFullSyncS, !(tempFullSyncS$siteYear %in% unique(tempDataSyncS$siteYear)))\n\n# this will work fo MA because not predicting to any completely new sites\ntempFullSiteYearS <- filter(tempFullSyncS, filter = year %in% unique(tempDataSyncS$year))\ntempFullSiteS <- filter(tempFullSyncS, filter = !(year %in% unique(tempDataSyncS$year)))\n\ntempFullSiteYearS$tempPredicted <- modSummary@fixEf[\"intercept\", \"Mean\"] +\n  BSite[tempFullSiteYearS$site, \"intercept.site\"] + \n  BYear[tempFullSiteYearS$cYear, \"intercept.year\"] + \n  modSummary@fixEf[\"lat\", \"Mean\"]*tempFullSiteYearS$Latitude + \n  modSummary@fixEf[\"lon\", \"Mean\"]*tempFullSiteYearS$Longitude + \n  BSite[tempFullSiteYearS$site, \"airTemp\"]*tempFullSiteYearS$airTemp + \n  BSite[tempFullSiteYearS$site, \"airTempLag1\"]*tempFullSiteYearS$airTempLagged1 + \n  BSite[tempFullSiteYearS$site, \"airTempLag2\"]*tempFullSiteYearS$airTempLagged2 + \n  BSite[tempFullSiteYearS$site, \"precip\"]*tempFullSiteYearS$prcp + \n  BSite[tempFullSiteYearS$site, \"precipLag1\"]*tempFullSiteYearS$prcpLagged1 + \n  BSite[tempFullSiteYearS$site, \"precipLag2\"]*tempFullSiteYearS$prcpLagged2 + \n  BSite[tempFullSiteYearS$site, \"drainage\"]*tempFullSiteYearS$TotDASqKM + \n  BSite[tempFullSiteYearS$site, \"forest\"]*tempFullSiteYearS$Forest + \n  BSite[tempFullSiteYearS$site, \"elevation\"]*tempFullSiteYearS$ReachElevationM + \n  BSite[tempFullSiteYearS$site, \"coarseness\"]*tempFullSiteYearS$SurficialCoarseC + \n  BSite[tempFullSiteYearS$site, \"wetland\"]*tempFullSiteYearS$CONUSWetland + \n  BSite[tempFullSiteYearS$site, \"impoundments\"]*tempFullSiteYearS$ImpoundmentsAllSqKM + \n  BSite[tempFullSiteYearS$site, \"swe\"]*tempFullSiteYearS$swe + \n  BYear[tempFullSiteYearS$cYear, \"dOY\"]*tempFullSiteYearS$dOY + \n  BYear[tempFullSiteYearS$cYear, \"dOY2\"]*((tempFullSiteYearS$dOY)^2) + \n  BYear[tempFullSiteYearS$cYear, \"dOY3\"]*((tempFullSiteYearS$dOY)^3)\n\ntempFullSiteS$tempPredicted <- modSummary@fixEf[\"intercept\", \"Mean\"] +\n  BSite[tempFullSiteS$site, \"intercept.site\"] + \n  modSummary@fixEf[\"lat\", \"Mean\"]*tempFullSiteS$Latitude + \n  modSummary@fixEf[\"lon\", \"Mean\"]*tempFullSiteS$Longitude + \n  BSite[tempFullSiteS$site, \"airTemp\"]*tempFullSiteS$airTemp + \n  BSite[tempFullSiteS$site, \"airTempLag1\"]*tempFullSiteS$airTempLagged1 + \n  BSite[tempFullSiteS$site, \"airTempLag2\"]*tempFullSiteS$airTempLagged2 + \n  BSite[tempFullSiteS$site, \"precip\"]*tempFullSiteS$prcp + \n  BSite[tempFullSiteS$site, \"precipLag1\"]*tempFullSiteS$prcpLagged1 + \n  BSite[tempFullSiteS$site, \"precipLag2\"]*tempFullSiteS$prcpLagged2 + \n  BSite[tempFullSiteS$site, \"drainage\"]*tempFullSiteS$TotDASqKM + \n  BSite[tempFullSiteS$site, \"forest\"]*tempFullSiteS$Forest + \n  BSite[tempFullSiteS$site, \"elevation\"]*tempFullSiteS$ReachElevationM + \n  BSite[tempFullSiteS$site, \"coarseness\"]*tempFullSiteS$SurficialCoarseC + \n  BSite[tempFullSiteS$site, \"wetland\"]*tempFullSiteS$CONUSWetland + \n  BSite[tempFullSiteS$site, \"impoundments\"]*tempFullSiteS$ImpoundmentsAllSqKM + \n  BSite[tempFullSiteS$site, \"swe\"]*tempFullSiteS$swe + \n  modSummary@fixEf[\"dOY\", \"Mean\"]*tempFullSiteS$dOY + \n  modSummary@fixEf[\"dOY2\", \"Mean\"]*((tempFullSiteS$dOY)^2) + \n  modSummary@fixEf[\"dOY3\", \"Mean\"]*((tempFullSiteS$dOY)^3)\n\n\ntempFullS <- rbind(tempFullSiteYearS, tempFullSiteS)\n\ntempFull <- left_join(tempFullSync, tempFullS[ , c(\"year\", \"site\", \"date\", \"tempPredicted\")], by = c(\"year\", \"site\", \"date\")) \n\n\n# plot observed and predicte vs day of the year for all sites in all years\nsites <- unique(as.character(tempFull$site))\n\nfor(i in 1:length(unique(tempFull$site))){\n  dataSite <- filter(tempFull, filter = site == sites[i])\n  dataSiteObs <- filter(tempDataSync, filter = site == sites[i])\n  foo <- ggplot(dataSite, aes(dOY, tempPredicted)) + \n    coord_cartesian(xlim = c(100, 300), ylim = c(0, 35)) + \n    geom_point(data=dataSiteObs, aes(dOY, temp), colour='blue') +\n    geom_point(colour = 'red', size=1) + \n    geom_line(colour = 'red', size=0.1) + \n    geom_point(aes(dOY, airTemp), size=1) + \n    ggtitle(dataSite$site[i]) + \n    facet_wrap(~year) + \n    xlab(label = 'Day of the year') + ylab('Temperature (C)') + \n    theme(axis.text.x = element_text(angle = 45))\n  ggsave(filename=paste0(dataLocalDir,'/', 'plots/fullRecord/', dataSite$site[i], '.png'), plot=foo, dpi=300 , width=12,height=8, units='in' )\n} # surprisingly fast but wouldn't do for all catchments\n\nyearPredict <- filter(tempFull, site == \"MADEP_W0989_T1\", year == \"2005\")\ndataSiteObs <- filter(tempDataSync, filter = site == \"MADEP_W0989_T1\")\nfoo <- ggplot(yearPredict, aes(dOY, tempPredicted)) + \n  coord_cartesian(xlim = c(50, 350), ylim = c(0, 30)) + \n  geom_point(data=dataSiteObs, aes(dOY, temp), colour = 'black') +\n  geom_point(colour = 'blue') + \n  geom_line(colour = 'blue', size=0.2) + \n  geom_point(aes(dOY, airTemp), colour = 'red') + \n  #ggtitle(dataSite$site[i]) + \n  facet_wrap(~year) + \n  xlab(label = 'Day of the year') + ylab('Temperature (C)') + \n  theme(axis.text.x = element_text(angle = 45))\nggsave(filename=\"C:/Users/dhocking/Documents/temperatureProject/presentations/yearPredict.png\", plot=foo, dpi=300, width=12, height=8, units=\"in\")\n\n\nyearPredict <- filter(tempFull, site == \"MADEP_W0989_T1\", year > 2001 & year <= 2013)\ndataSiteObs <- filter(tempDataSync, filter = site == \"MADEP_W0989_T1\")\nfoo <- ggplot(yearPredict, aes(dOY, tempPredicted)) + \n  coord_cartesian(xlim = c(100, 300), ylim = c(0, 30)) + \n  geom_point(data=dataSiteObs, aes(dOY, temp), colour='black') +\n  geom_point(colour = 'blue', size=1) + \n  geom_line(colour = 'blue', size=0.1) + \n  geom_point(aes(dOY, airTemp), size=1, colour='red') + \n  #ggtitle(dataSite$site[i]) + \n  facet_wrap(~year) + \n  xlab(label = 'Day of the year') + ylab('Temperature (C)') + \n  theme(axis.text.x = element_text(angle = 45))\nggsave(filename=\"C:/Users/dhocking/Documents/temperatureProject/presentations/multiYearPredict.png\", plot=foo, dpi=300, width=12, height=8, units=\"in\")\n\n\n\n\n# plot observed and predicte vs day of the year for all sites\nsites <- unique(tempDataSync$site)\n\nfor(i in 1:length(unique(tempDataSync$site))){\n  dataSiteObs <- filter(tempDataSync, filter = site == sites[i])\n  foo <- ggplot(dataSiteObs, aes(dOY, temp)) + coord_cartesian(xlim = c(50, 350), ylim = c(0, 30)) + geom_point(colour = 'blue') + geom_line(colour = 'blue') + geom_point(aes(dOY, streamTempPred), colour = 'red', size=1) + geom_line(aes(dOY, streamTempPred), colour = 'red', size=0.1) + geom_point(aes(dOY, airTemp), colour='black', size=1) + ggtitle(unique(tempDataSync$fsite)[i]) + facet_wrap(~year) + xlab(label = 'Day of the year') + ylab('Temperature (C)')\n  ggsave(filename=paste0(dataLocalDir,'/', 'plots/', unique(tempDataSync$fsite)[i], '.png'), plot=foo, dpi=300 , width=6,height=4, units='in' )\n} # surprisingly fast\n\nrmse(tempFull[which(!is.na(tempFull$temp)), \"temp\"] - tempFull[!is.na(tempFull$temp), \"tempPredicted\"])\n\n\n############## Derived metrics ##########\n\n# Mean maximum daily mean temperature by site (over years)\nbySite <- group_by(tempFull, site)\nbySiteYear <- group_by(bySite, year, add = TRUE)\nmaxTemp <- filter(bySite, tempPredicted == max(tempPredicted))\nmaxTempSite <- summarise(maxTemp, mean(tempPredicted)) # not needed - already max.t\n#summarise(by.site.year, sd(mean(tempPredicted))) # not working based on filter or grouping\n\n(maxTempSiteYear <- summarise(bySiteYear, max(tempPredicted)))\nnames(maxTempSiteYear) <- c(\"site\", \"year\", \"maxTempPredicted\")\nderivedSiteMetrics <- summarise(maxTempSiteYear, meanMaxTemp = mean(maxTempPredicted))\n# maxTempSiteYear1 <- left_join(as.data.frame(maxTempSiteYear), tempFull, by=c(\"site\", \"tempPredicted\"))\n\n# Maximum max daily mean temperature\nmaxMaxTemp <- bySiteYear %>%\n  summarise(maxTemp = max(tempPredicted)) %>%\n  summarise(maxMaxTemp = max(maxTemp))\n\nderivedSiteMetrics <- left_join(derivedSiteMetrics, maxMaxTemp, by = \"site\")\n\n# ggplot(tempFull, aes(dOY, temp)) + geom_point(size=1, colour='black') + geom_point(aes(dOY, tempPredicted), colour = 'red', size=0.75) + ylab(label=\"Stream temperature (C)\") + xlab(\"Day of the year\") + geom_point(data=maxTempSiteYear1, aes(dOY, tempPredicted), colour = \"green\") + facet_grid(site ~ year) # max temp points all replicated on every panel\n\n# Number of days with stream temp > 18C\nmeanDays18 <- bySiteYear %>%\n  filter(tempPredicted > 18) %>%\n  summarise(days18 = n()) %>%\n  summarise(meanDays18 = mean(days18))\n\nderivedSiteMetrics <- left_join(derivedSiteMetrics, meanDays18, by = \"site\")\n\n# Number of years with mean maximum over 18 C\nyearsMaxTemp18 <- summarise(\n  filter(summarise(bySiteYear, maxTemp = max(tempPredicted)), maxTemp > 18),\n  yearsMaxTemp18 = n()\n)\nderivedSiteMetrics <- left_join(derivedSiteMetrics, yearsMaxTemp18, by = \"site\")\n\n# frequency of years with a mean max over 18 C\nderivedSiteMetrics <- mutate(derivedSiteMetrics, freqMax18 = yearsMaxTemp18/length(unique(bySiteYear$year)))\n\n# Resistance to peak air temperature\n## Need to think of a way to make more general rather than by specific dOY (60 day max moving window air temp?)\nmeanResist <- bySiteYear %>%\n  filter(dOY >= 145 & dOY <= 275) %>%\n  mutate(absResid = abs(airTemp - tempPredicted)) %>%\n  summarise(resistance = sum(absResid)) %>%\n  summarise(meanResist = mean(resistance))\n\nderivedSiteMetrics <- left_join(derivedSiteMetrics, meanResist, by = \"site\")\n\n\nWB.2011.summer <- tempFull[which(tempFull$site == \"MAUSGS_WEST_BROOK\" & tempFull$year == 2011 & tempFull$dOY >=145 & tempFull$dOY <= 275), ]\nsum(WB.2011.summer$airTemp - WB.2011.summer$tempPredicted)\n\nggplot(tempFull[which(tempFull$site == \"MAUSGS_WEST_BROOK\" & tempFull$year == 2011), ], aes(dOY, tempPredicted)) + \n  geom_point(size=2, colour = \"red\") + geom_line(colour = 'red') +\n  geom_point(data=tempFull[which(tempFull$site == \"MAUSGS_WEST_BROOK\" & tempFull$year == 2011), ], aes(dOY, airTemp), colour = \"black\", size=2) + \n  geom_line(data=tempFull[which(tempFull$site == \"MAUSGS_WEST_BROOK\" & tempFull$year == 2011), ], aes(dOY, airTemp), colour = \"black\") + \n  geom_ribbon(data = tempFull[which(tempFull$site == \"MAUSGS_WEST_BROOK\" & tempFull$year == 2011 & tempFull$dOY >=145 & tempFull$dOY <= 275), ], aes(x=dOY, ymin=tempPredicted, ymax=airTemp), fill=\"dark grey\", alpha=.5) +\n  xlab(\"Day of the year\") +\n  ylab(\"Temperature (C)\") #+ theme_classic()\n\nggplot(tempFull[which(tempFull$site == \"WB OBEAR\" & tempFull$year == 2010), ], aes(dOY.real, tempPredicted)) + \n  geom_point(size=2, colour = \"black\") + geom_line(colour = 'black') +\n  geom_abline(intercept = 18, slope=0, colour='red') +\n  geom_point(data = tempFull[which(tempFull$site == \"WB OBEAR\" & tempFull$year == 2010 & tempFull$tempPredicted >= 18), ], aes(dOY.real, tempPredicted), colour='red') +\n  xlab(\"Day of the year\") +\n  ylab(\"Stream temperature (C)\") #+ theme_classic()\n\n# Reset ggplot2 theme default to gray\ntheme_set(theme_gray())\n\n\n\n# Air-Water Resiliency\n\n# RMSE for each site (flag highest)\nmeanRMSE <- bySiteYear %>%\n  filter(!(is.na(temp))) %>%\n  mutate(error2 = (temp - tempPredicted)^2) %>%\n  summarise(RMSE = sqrt(mean(error2))) %>%\n  summarise(meanRMSE = mean(RMSE))\n\nderivedSiteMetrics <- left_join(derivedSiteMetrics, meanRMSE, by = \"site\")\n\n# total observations (days with data) per site\ntotObs <- bySiteYear %>%\n  filter(!is.na(temp)) %>%\n  summarise(Obs = n()) %>%\n  summarise(totObs = sum(Obs))\n\nderivedSiteMetrics <- left_join(derivedSiteMetrics, totObs, by = \"site\")\n\n# Flag based on RMSE > 90%\nderivedSiteMetrics <- mutate(derivedSiteMetrics, flag = ifelse(meanRMSE > quantile(derivedSiteMetrics$meanRMSE, probs = c(0.9), na.rm=TRUE), \"Flag\", \"\"))\n\nsummary(derivedSiteMetrics)\n\nderivedSiteMetricsClean <- na.omit(derivedSiteMetrics)\nwrite.table(derivedSiteMetricsClean, file = 'reports/MADEP/derivedSiteMetrics.csv', sep=',', row.names = F)\n\n\n\n",
    "created" : 1406839159675.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4093978748",
    "id" : "81BD74EA",
    "lastKnownWriteTime" : 1406248498,
    "path" : "~/temperatureProject/code/modPredictions.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}